-- 국가별 키워드 통계 추출을 위한 통계 수집 데이터 (최근 10년)
DROP TABLE SCOPUS_2017Y_CT_KEYWORD_BASE CASCADE CONSTRAINTS PURGE;
/*
국가별 키워드 통계 추출을 위한 수집 쿼리
KEYWORD : 키워드
COUNTRY_CODE : 국가코드 
EID : 문서  EID
CIT_COUNT : 피인용 수
DOC_F_CNT : 문서 1건 당 Fractional 문서건수 (1 * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT))
CIT_T_CNT : 문서 1건당 Fractional 피인용수 (B.CIT_COUNT * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT)
*/
CREATE TABLE SCOPUS_2017Y_CT_KEYWORD_BASE AS
/*
	EID :  문헌 EID
	COUNTRY_CODE : 국가코드
	COUNRY_TOTAL_CNT : 총 국가 건수
	COUNTRY_CNT : 논문의 국가 건수
	SCOPUS_2017Y_KEYWORD : 최근 10년 논문의 키워드 정보 (Index Keyword가 없으면 Author Keyword 통합)
*/
SELECT DISTINCT A.KEYWORD, B.COUNTRY_CODE, B.EID, B.CIT_COUNT, (1 * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT)) AS DOC_F_CNT, (B.CIT_COUNT * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT)) AS CIT_T_CNT
FROM SCOPUS_2017Y_KEYWORD A
INNER JOIN (
	SELECT DISTINCT A.COUNTRY_CODE, A.EID, A.CIT_COUNT, B.COUNRY_TOTAL_CNT, B.COUNTRY_CNT
	FROM (
		SELECT DISTINCT A.COUNTRY_CODE, A.EID, A.CIT_COUNT
		FROM SCOPUS_2017_UNIQ_AFF_CT_EID A
		-- 20개 과학기술분야 문서 검색
		WHERE A.L_ASJC_CODE IN ('1000', '1100',
			'1300', '1500',
			'1600', '1700',
			'1800', '1900',
			'2100', '2200',
			'2300', '2400',
			'2500', '2600',
			'2700', '2800',
			'3000', '3100',
			'3400', '3500'
		)
	) A
	INNER JOIN (
		-- FRACTIONAL 통계(논문건수, 총피인용수)를 위한 문헌별 국가 통계
		/*
			EID :  문헌 EID
			COUNTRY_CODE : 국가코드
			COUNRY_TOTAL_CNT : 총 국가 건수
			COUNTRY_CNT : 논문의 국가 건수
		*/
		SELECT DISTINCT IN_STATS.EID, IN_STATS.COUNTRY_CODE, IN_STATS.COUNRY_TOTAL_CNT, IN_STATS.COUNTRY_CNT
		FROM (
			SELECT STATS.EID, STATS.PUBLICATION_YEAR, STATS.L_ASJC_CODE AS ASJC_CODE, STATS.COUNTRY_CODE, STATS.COUNRY_TOTAL_CNT, COUNT (STATS.COUNTRY_CODE) AS COUNTRY_CNT
			FROM (
				SELECT COUNTRY_STATS.EID, S_STATS.PUBLICATION_YEAR, COUNTRY_STATS.L_ASJC_CODE, COUNTRY_STATS.COUNTRY_CODE, S_STATS.CT_CNT AS COUNRY_TOTAL_CNT
				FROM  SCOPUS_2017_AFF_CT_EID COUNTRY_STATS
				INNER JOIN (
					SELECT SK.EID, SK.PUBLICATION_YEAR, SK.L_ASJC_CODE AS ASJC_CODE, COUNT(SK.COUNTRY_CODE) AS CT_CNT
					FROM SCOPUS_2017_AFF_CT_EID SK 
					GROUP BY SK.EID, SK.PUBLICATION_YEAR, SK.L_ASJC_CODE
				) S_STATS
				ON 	S_STATS.EID = COUNTRY_STATS.EID 
				AND S_STATS.PUBLICATION_YEAR = COUNTRY_STATS.PUBLICATION_YEAR 
				AND S_STATS.ASJC_CODE = COUNTRY_STATS.L_ASJC_CODE
			) STATS
			GROUP BY STATS.EID, STATS.PUBLICATION_YEAR, STATS.L_ASJC_CODE, STATS.COUNTRY_CODE, STATS.COUNRY_TOTAL_CNT
		) IN_STATS
	) B
	ON A.EID = B.EID AND A.COUNTRY_CODE = B.COUNTRY_CODE
) B
ON A.EID = B.EID;

CREATE INDEX IDX_SCOPUS_2017Y_CTS_CT ON SCOPUS_2017Y_CT_KEYWORD_BASE (COUNTRY_CODE);
CREATE INDEX IDX_SCOPUS_2017Y_CTS_EID ON SCOPUS_2017Y_CT_KEYWORD_BASE (EID);
CREATE INDEX IDX_SCOPUS_2017Y_CTS_CIT_CNT ON SCOPUS_2017Y_CT_KEYWORD_BASE (CIT_COUNT);
CREATE INDEX IDX_SCOPUS_2017Y_CTS_DCNT ON SCOPUS_2017Y_CT_KEYWORD_BASE (DOC_F_CNT);
CREATE INDEX IDX_SCOPUS_2017Y_CTS_SCICNT ON SCOPUS_2017Y_CT_KEYWORD_BASE (CIT_T_CNT);


-- 국가별 키워드 통계 추출을 위한 통계 수집 데이터 (최근 5년)
DROP TABLE SCOPUS_2017Y_5Y_CT_KEY_BASE CASCADE CONSTRAINTS PURGE;
/*
국가별 키워드 통계 추출을 위한 수집 쿼리
KEYWORD : 키워드
COUNTRY_CODE : 국가코드 
EID : 문서  EID
CIT_COUNT : 피인용 수
DOC_F_CNT : 문서 1건 당 Fractional 문서건수 (1 * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT))
CIT_T_CNT : 문서 1건당 Fractional 피인용수 (B.CIT_COUNT * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT)
*/
CREATE TABLE SCOPUS_2017Y_5Y_CT_KEY_BASE AS
/*
	EID :  문헌 EID
	COUNTRY_CODE : 국가코드
	COUNRY_TOTAL_CNT : 총 국가 건수
	COUNTRY_CNT : 논문의 국가 건수
	SCOPUS_2017Y_KEYWORD : 최근 10년 논문의 키워드 정보 (Index Keyword가 없으면 Author Keyword 통합)
*/
SELECT DISTINCT A.KEYWORD, B.COUNTRY_CODE, B.EID, B.CIT_COUNT, (1 * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT)) AS DOC_F_CNT, (B.CIT_COUNT * (B.COUNTRY_CNT / B.COUNRY_TOTAL_CNT)) AS CIT_T_CNT
FROM SCOPUS_2017Y_KEYWORD A
INNER JOIN (
	SELECT DISTINCT A.COUNTRY_CODE, A.EID, A.CIT_COUNT, B.COUNRY_TOTAL_CNT, B.COUNTRY_CNT
	FROM (
		SELECT DISTINCT A.COUNTRY_CODE, A.EID, A.CIT_COUNT
		FROM SCOPUS_2017_UNIQ_AFF_CT_EID A
		-- 20개 과학기술분야 문서 검색
		WHERE A.L_ASJC_CODE IN ('1000', '1100',
			'1300', '1500',
			'1600', '1700',
			'1800', '1900',
			'2100', '2200',
			'2300', '2400',
			'2500', '2600',
			'2700', '2800',
			'3000', '3100',
			'3400', '3500'
		) AND A.PUBLICATION_YEAR BETWEEN '2012' AND '2016'
	) A
	INNER JOIN (
		-- FRACTIONAL 통계(논문건수, 총피인용수)를 위한 문헌별 국가 통계
		/*
			EID :  문헌 EID
			COUNTRY_CODE : 국가코드
			COUNRY_TOTAL_CNT : 총 국가 건수
			COUNTRY_CNT : 논문의 국가 건수
		*/
		SELECT DISTINCT IN_STATS.EID, IN_STATS.COUNTRY_CODE, IN_STATS.COUNRY_TOTAL_CNT, IN_STATS.COUNTRY_CNT
		FROM (
			SELECT STATS.EID, STATS.PUBLICATION_YEAR, STATS.L_ASJC_CODE AS ASJC_CODE, STATS.COUNTRY_CODE, STATS.COUNRY_TOTAL_CNT, COUNT (STATS.COUNTRY_CODE) AS COUNTRY_CNT
			FROM (
				SELECT COUNTRY_STATS.EID, S_STATS.PUBLICATION_YEAR, COUNTRY_STATS.L_ASJC_CODE, COUNTRY_STATS.COUNTRY_CODE, S_STATS.CT_CNT AS COUNRY_TOTAL_CNT
				FROM  SCOPUS_2017_AFF_CT_EID COUNTRY_STATS
				INNER JOIN (
					SELECT SK.EID, SK.PUBLICATION_YEAR, SK.L_ASJC_CODE AS ASJC_CODE, COUNT(SK.COUNTRY_CODE) AS CT_CNT
					FROM SCOPUS_2017_AFF_CT_EID SK 
					GROUP BY SK.EID, SK.PUBLICATION_YEAR, SK.L_ASJC_CODE
				) S_STATS
				ON  S_STATS.EID = COUNTRY_STATS.EID 
				AND S_STATS.PUBLICATION_YEAR = COUNTRY_STATS.PUBLICATION_YEAR 
				AND S_STATS.ASJC_CODE = COUNTRY_STATS.L_ASJC_CODE
				WHERE COUNTRY_STATS.PUBLICATION_YEAR BETWEEN '2012' AND '2016'
			) STATS
			GROUP BY STATS.EID, STATS.PUBLICATION_YEAR, STATS.L_ASJC_CODE, STATS.COUNTRY_CODE, STATS.COUNRY_TOTAL_CNT
		) IN_STATS
	) B
	ON A.EID = B.EID AND A.COUNTRY_CODE = B.COUNTRY_CODE
) B
ON A.EID = B.EID;

CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTS_CT ON SCOPUS_2017Y_5Y_CT_KEY_BASE (COUNTRY_CODE);
CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTS_EID ON SCOPUS_2017Y_5Y_CT_KEY_BASE (EID);
CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTS_CICNT ON SCOPUS_2017Y_5Y_CT_KEY_BASE (CIT_COUNT);
CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTS_DCNT ON SCOPUS_2017Y_5Y_CT_KEY_BASE (DOC_F_CNT);
CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTS_CCNT ON SCOPUS_2017Y_5Y_CT_KEY_BASE (CIT_T_CNT);

-- 국가별 키워드 통계 추출
DROP TABLE SCOPUS_2017Y_CT_KEYWORD_STATS CASCADE CONSTRAINTS PURGE;
CREATE TABLE SCOPUS_2017Y_CT_KEYWORD_STATS NOLOGGING AS
/*
	KEYWORD : 키워드
	COUNTRY_CODE : 국가코드
	D_CNT : PByKeyByCo
	C_CNT : CByKeyByCo
*/
SELECT  A.KEYWORD, A.COUNTRY_CODE, SUM(A.DOC_F_CNT) AS D_CNT, SUM(A.CIT_T_CNT)  AS C_CNT
FROM
(
  SELECT A.KEYWORD, A.COUNTRY_CODE, A.DOC_F_CNT, A.CIT_T_CNT
  FROM SCOPUS_2017Y_CT_KEYWORD_BASE A
  INNER JOIN (
        SELECT DISTINCT KEYWORD
	 FROM SCOPUS_2017Y_KEYWORD_RANKING
	 WHERE RANKING <= 1000
  )B
  ON A.KEYWORD = B.KEYWORD
) A
GROUP BY A.RANKING, A.KEYWORD, A.COUNTRY_CODE
ORDER BY A.KEYWORD, A.COUNTRY_CODE;

CREATE INDEX IDX_SCOPUS_2017Y_CTK_KWD ON SCOPUS_2017Y_CT_KEYWORD_STATS(KEYWORD);
CREATE INDEX IDX_SCOPUS_2017Y_CTK_CT ON SCOPUS_2017Y_CT_KEYWORD_STATS(COUNTRY_CODE);


-- 국가별 키워드 통계 추출 (최근 5년)
DROP TABLE SCOPUS_2017Y_5Y_CT_KEY_STATS CASCADE CONSTRAINTS PURGE;
CREATE TABLE SCOPUS_2017Y_5Y_CT_KEY_STATS NOLOGGING AS
/*
	KEYWORD : 키워드
	COUNTRY_CODE : 국가코드
	D_CNT : PByKeyByCo
	C_CNT : CByKeyByCo
*/
SELECT  A.KEYWORD, A.COUNTRY_CODE, SUM(A.DOC_F_CNT) AS D_CNT, SUM(A.CIT_T_CNT)  AS C_CNT
FROM
(
  SELECT A.KEYWORD, A.COUNTRY_CODE, A.DOC_F_CNT, A.CIT_T_CNT
  FROM SCOPUS_2017Y_5Y_CT_KEY_BASE A
  INNER JOIN (
        SELECT DISTINCT KEYWORD
	 FROM SCOPUS_2017Y_5Y_KEY_RANKING
	 WHERE RANKING <= 1000
  )B
  ON A.KEYWORD = B.KEYWORD
) A
GROUP BY A.KEYWORD, A.COUNTRY_CODE
ORDER BY A.KEYWORD, A.COUNTRY_CODE;

CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTK_KW ON SCOPUS_2017Y_5Y_CT_KEY_STATS(KEYWORD);
CREATE INDEX IDX_SCOPUS_2017Y_5Y_CTK_CT ON SCOPUS_2017Y_5Y_CT_KEY_STATS(COUNTRY_CODE);

-- 전체 키워드 문서 건수, 총 피인용 수 추출
/*
	KEYWORD : 키워드
	COUNTRY_CODE : 국가코드
	D_CNT : PByKey
	C_CNT : CByKey
*/
DROP TABLE SCOPUS_2017Y_CT_KEYWORD_TOT CASCADE CONSTRAINTS PURGE;
CREATE TABLE SCOPUS_2017Y_CT_KEYWORD_TOT NOLOGGING AS
SELECT A.KEYWORD, DOC_CNT, CIT_T_CNT
FROM (
     SELECT A.KEYWORD, COUNT(EID) AS DOC_CNT, COUNT(CIT_COUNT) AS CIT_T_CNT
     FROM (
       SELECT DISTINCT KEYWORD, EID, CIT_COUNT
       FROM  SCOPUS_2017Y_CT_KEYWORD_BASE
     ) A  	
     GROUP BY KEYWORD
) A;

CREATE INDEX IDX_SCOPUS_2017Y_K_KWD_RANK ON SCOPUS_2017Y_CT_KEYWORD_TOT(ranking);
CREATE INDEX IDX_SCOPUS_2017Y_K_KWD ON SCOPUS_2017Y_CT_KEYWORD_TOT(KEYWORD);

-- 전체 키워드 문서 건수, 총 피인용 수 추출 (최근 5년)
/*
	KEYWORD : 키워드
	COUNTRY_CODE : 국가코드
	D_CNT : PByKey
	C_CNT : CByKey
*/
DROP TABLE SCOPUS_2017Y_CT_5Y_KEY_TOT CASCADE CONSTRAINTS PURGE;
CREATE TABLE SCOPUS_2017Y_CT_Y_KEY_TOT NOLOGGING AS
SELECT A.KEYWORD, DOC_CNT, CIT_T_CNT
FROM (
     SELECT A.KEYWORD, COUNT(EID) AS DOC_CNT, COUNT(CIT_COUNT) AS CIT_T_CNT
     FROM (
       SELECT DISTINCT KEYWORD, EID, CIT_COUNT
       FROM  SCOPUS_2017Y_5Y_CT_KEY_BASE
     ) A  	
     GROUP BY KEYWORD
) A;

CREATE INDEX IDX_SCOPUS_2017Y_5K_KWD_RANK ON SCOPUS_2017Y_CT_5Y_KEY_TOT(ranking);
CREATE INDEX IDX_SCOPUS_2017Y_5K_KWD ON SCOPUS_2017Y_CT_5Y_KEY_TOT(KEYWORD);

-- 국가별, 키워드 활동도, 영향력 통계 추출 (최근 10년)
DROP TABLE SCOPUS_2017Y_CT_KEY_ACTIVE CASCADE CONSTRAINTS PURGE;
CREATE TABLE  SCOPUS_2017Y_CT_KEY_ACTIVE NOLOGGING AS 
SELECT 
   A.KEYWORD, 
   A.COUNTRY_CODE,
   -- 활동도 계산
   ((A.P_BY_KEY_BY_CO/P_BY_KEY) / (A.P_BY_CO / A.P)) AS ACTIVATION,
   -- 영향력 계산
   ((A.C_BY_KEY_BY_CO/C_BY_KEY) / (A.C_BY_CO / A.C)) AS EFFECTION
FROM (
	SELECT
    	 A.KEYWORD,
    	 A.COUNTRY_CODE,
         A.P_BY_KEY_BY_CO,
         A.C_BY_KEY_BY_CO,
         (SELECT I.P SCOPUS_2017Y_CT_COMPLETE_STAT I WHERE I.COUNTRY_CODE = A.COUNTRY_CODE) AS P,
         (SELECT J.C SCOPUS_2017Y_CT_COMPLETE_STAT J WHERE I.COUNTRY_CODE = A.COUNTRY_CODE) AS C,
         (SELECT J.P_BY_CO SCOPUS_2017Y_CT_COMPLETE_STAT J WHERE I.COUNTRY_CODE = A.COUNTRY_CODE) AS P_BY_CO,
         (SELECT J.C_BY_CO SCOPUS_2017Y_CT_COMPLETE_STAT J WHERE J.COUNTRY_CODE = A.COUNTRY_CODE) AS C_BY_CO,
         (SELECT K.DOC_CNT SCOPUS_2017Y_CT_KEYWORD_TOT K WHERE K.KEYWORD = A.KEYWORD) AS P_BY_KEY,
         (SELECT L.CIT_T_CNT SCOPUS_2017Y_CT_KEYWORD_TOT L WHERE L.KEYWORD = A.KEYWORD) AS C_BY_KEY,
    FROM (
       SELECT  A.KEYWORD, A.COUNTRY_CODE,A.D_CNT AS P_BY_KEY_BY_CO, A.C_CNT AS C_BY_KEY_BY_CO
       FROM SCOPUS_2017Y_CT_KEYWORD_STATS A
    ) A
) A;

-- 국가별, 키워드 활동도, 영향력 통계 추출 (최근 5년)
DROP TABLE SCOPUS_2017Y_5Y_CT_KEY_ACTIVE CASCADE CONSTRAINTS PURGE;
CREATE TABLE  SCOPUS_2017Y_5Y_CT_KEY_ACTIVE NOLOGGING AS 
SELECT 
   A.KEYWORD, 
   A.COUNTRY_CODE,
   -- 활동도 계산
   ((A.P_BY_KEY_BY_CO/P_BY_KEY) / (A.P_BY_CO / A.P)) AS ACTIVATION,
   -- 영향력 계산
   ((A.C_BY_KEY_BY_CO/C_BY_KEY) / (A.C_BY_CO / A.C)) AS EFFECTION
FROM (
	SELECT
    	 A.KEYWORD,
    	 A.COUNTRY_CODE,
        A.P_BY_KEY_BY_CO,
        A.C_BY_KEY_BY_CO,
        (SELECT I.P SCOPUS_2017Y_5Y_CT_COMP_STAT I WHERE I.COUNTRY_CODE = A.COUNTRY_CODE) AS P,
        (SELECT J.C SCOPUS_2017Y_5Y_CT_COMP_STAT J WHERE I.COUNTRY_CODE = A.COUNTRY_CODE) AS C,
        (SELECT J.P_BY_CO SCOPUS_2017Y_5Y_CT_COMP_STAT J WHERE I.COUNTRY_CODE = A.COUNTRY_CODE) AS P_BY_CO,
        (SELECT J.C_BY_CO SCOPUS_2017Y_5Y_CT_COMP_STAT J WHERE J.COUNTRY_CODE = A.COUNTRY_CODE) AS C_BY_CO,
        (SELECT K.DOC_CNT SCOPUS_2017Y_CT_5Y_KEY_TOT K WHERE K.KEYWORD = A.KEYWORD) AS P_BY_KEY,
        (SELECT L.CIT_T_CNT SCOPUS_2017Y_CT_5Y_KEY_TOT L WHERE L.KEYWORD = A.KEYWORD) AS C_BY_KEY,
    FROM (
      SELECT  A.KEYWORD, A.COUNTRY_CODE,A.D_CNT AS P_BY_KEY_BY_CO, A.C_CNT AS C_BY_KEY_BY_CO
      FROM SCOPUS_2017Y_5Y_CT_KEY_STATS A
    ) A
    INNER JOIN SCOPUS_2017Y_CT_COMPLETE_STAT B
    ON A.COUNTRY_CODE = B.COUNTRY_CODE
) A;


